[gd_resource type="Shader" format=3 uid="uid://b6tbllx7w07bx"]

[resource]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.2.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform sampler2D NORMAL_TEXTURE : hint_normal_roughness_texture;
uniform sampler2D DEPTH_TEXTURE : source_color, hint_depth_texture, filter_linear_mipmap;
uniform sampler2D CROSS_HATCH_R;
uniform sampler2D CROSS_HATCH_G;
uniform sampler2D CROSS_HATCH_B;
uniform float CROSS_HATCH_SCALE = 1.0;
uniform float CROSS_HATCH_STRENGTH = 1.0;
uniform sampler2D SCREEN_TEXTURE : hint_screen_texture;
uniform float DEPTH_DEADZONE = 1.0;
uniform float LOWER = 0.2;
uniform float MID = 0.5;
uniform float UPPER = 0.75;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}






void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	
	float luminance = 0.0;
	luminance += texture(SCREEN_TEXTURE, SCREEN_UV).r;
	luminance += texture(SCREEN_TEXTURE, SCREEN_UV).g;
	luminance += texture(SCREEN_TEXTURE, SCREEN_UV).b;
	
	float r_lum = 1.0 - texture(CROSS_HATCH_R, UV * CROSS_HATCH_SCALE).r * CROSS_HATCH_STRENGTH;
	float g_lum = 1.0 - texture(CROSS_HATCH_G, UV * CROSS_HATCH_SCALE).g * CROSS_HATCH_STRENGTH;
	float b_lum = 1.0 - texture(CROSS_HATCH_B, UV * CROSS_HATCH_SCALE).b * CROSS_HATCH_STRENGTH;
	
	float depth = texture(DEPTH_TEXTURE, UV).r;
	depth += texture(DEPTH_TEXTURE, UV).g;
	depth += texture(DEPTH_TEXTURE, UV).b;
	
	if(depth < DEPTH_DEADZONE) {
		if(luminance < LOWER) {
		NORMAL *= r_lum;
		NORMAL *= g_lum;
		NORMAL *= b_lum;
		}
		else if(luminance < MID) {
			NORMAL *= r_lum;
			NORMAL *= g_lum;
			//NORMAL *= texture(CROSS_HATCH, SCREEN_UV * CROSS_HATCH_SCALE).g;
		}
		else if(luminance < UPPER) {
			NORMAL *= r_lum;
		}
	}
}
"
